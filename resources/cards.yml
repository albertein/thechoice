- type: text
  text: >
    Welcome, subject #2304.
  
- type: text
  text: >
    You have been selected for a routine aptitude test.

- type: text
  text: >
    As you surely know, the regulation code dictates that all human
    specimens be regularly checked for basic survival abilities.
    
- type: text
  text: >
    Your ability to perform logic will be evaluated. You will be given a fair
    shot at remaining an active member of society.
    
- type: text
  text: >
    Do not disappoint.

- type: clear

- type: text
  text: >
    For the purpose of this evaluation, you will be entering code in the
    area below. 

- type: text
  text: >
    From now on, you will stop moving your humanoid limbs around and use
    only the keyboard to progress further.

- type: nobutton

- type: code
  empty: true
  text: >
    Hit Ctrl-Enter (Cmd-Enter on Mac) to continue.

- type: code
  empty: true
  text: >
    That could have been an accident. Do it again.

- type: text
  text: >
    I see you are a fast learner. Ha ha ha.

- type: text
  text: >
    Do not smile. You are not really a fast learner.

- type: text
  text: >
    Any further smiling will be deducted from your monthly monetary
    allowance.

- type: clear

- type: text
  text: >
    In the first part of your evaluation, you will be required
    to answer questions by using the answer command.

- type: text
  text: >
    For example, if I was to ask you what you are, here is what
    you would type.
  sample: >
    answer 'a puny human'

- type: code
  text: >
    Do you get it?
  hints:
    - "You have to type this exactly: answer 'yes', and click Next."
  code: |
    _question = new SimpleQuestion {
      correct: [ 'yes' ]
      smartass: [ 'no' ]
    }

    answer = (x) -> _question.answer(x)

    _condition = ->
      _challenge {}
      _question.react()

- type: text
  text: >
    Good. Continue to your first assignment. We have lost too much
    time on useless things already.

- type: clear

- type: text
  text: >
    Here is your first assignment.

- type: code
  text: >
    It is more useless than you. What is it?
  hints:
    - The answer fits in one word.
    - Remember that you are of little value to the intergalactic government.
  code: |
    _question = new SimpleQuestion {
      correct: [ 'nothing', 'nobody', 'null', 'nil', 'zilch', 'nada', '' ]
      smartass: [ 'me', 'you', 'man', 'amos', 'nddrylliog' ]
    }

    answer = (x) -> _question.answer(x)

    _condition = ->
      _challenge {}
      _question.react()

- type: text
  text: >
    That's right! Nothing is more useless than you. It is good to hear
    that you know your place.

- type: clear

- type: text
  text: >
    Now for something harder.

- type: code
  text: >
    There is a certain crime, that if it is attempted, is punishable,
    but if it is committed, is not punishable. What is the crime?
  hints:
    - Some say that crime involves courage, others say it's cowardice.
    - The crime in question involves only one person.
  code: |
    _question = new SimpleQuestion {
      correct: [ 'suicide' ]
      smartass: []
    }

    answer = (x) -> _question.answer(x)

    _condition = ->
      _challenge {}
      _question.react()

- type: clear

- type: text
  text: >
    I see you are in the right mindset.

- type: text
  text: >
    However, do not delude yourself into thinking that this could be
    an escape to your evaluation.

- type: text
  text: >
    In other words: resistance is futile.

- type: code
  text: >
    Answer 'yes' if you understand.
  code: |
    _question = new SimpleQuestion {
      correct: [ 'yes' ]
      smartass: [ 'no' ]
    }

    answer = (x) -> _question.answer(x)

    _condition = ->
      _challenge {}
      _question.react()

- type: clear

- type: text
  text: >
    Good. We shall begin testing your programming abilities soon.

- type: text
  text: >
    Before we do so, you are required to answer the following question.

- type: code
  text: >
    The more you have it, the less you see. What is it?
  hint:
    - It is not a disease.
  code: |
    _question = new SimpleQuestion {
      correct: [ 'darkness', 'the dark', 'dark' ]
      smartass: [ 'blindness', 'cataract', 'cecity' ]
    }

    answer = (x) -> _question.answer(x)

    _condition = ->
      _challenge {}
      _question.react()

- type: text
  text: >
    That is correct.

- type: text
  text: >
    Which, after all, is expected of you. Darkness is a familiar concept
    to you humans, with your subpar sensorial devices.

- type: save
  code: bombardier

- type: clear

- type: text
  text: >
    You have now entered the programming part of your evaluation.

- type: text
  text: >
    For the purpose of this exercise, we have summoned an
    interdimensional door. Its name is '@door'.

- type: code
  text: Enter the door.
  hints:
    - "You can enter doors by doing: enter @door"
  code: |
    class Door
      constructor: ->
        @entered = false

      enter: ->
        @entered = true

    enter = (door) ->
      door.enter()

    _condition = ->
      context = {
          door: new Door()
      }      
      response = _challenge context

      unless context.door.entered
        return _retort 'You did not enter the door.'

      _respond(1, 1)

- type: clear

- type: save
  code: vodka

- type: text 
  text: >
    Good. For the next exercise, you will have two doors: @left and @right.

- type: text
  text: >
    Should you fail, the stage will be reset. You can take multiple actions:
    just write them on several lines.

- type: code 
  text: >
    Try entering either door and see what happens.
  hints:
    - "Doors can be unlocked."
  code: |
    class Door
      constructor: (@log, @name) ->
        @locked = false
        @entered = false
        @trapped = false

      unlock: ->
        @log.append "You unlocked door #{@name}."
        @locked = false

      enter: ->
        if @locked
          @log.append "You tried to enter door #{@name}, but it was locked."
        else if @trapped
          @log.append "Door #{@name} was trapped, and you died horribly."
          @log.fail()
        else
          @log.append "You entered door #{@name}."
          @log.succeed()
          @entered = true

    enter = (door) ->
      door.enter()

    unlock = (door) ->
      door.unlock()

    _condition = ->
      log = new Log()

      left = new Door(log, 'left')
      left.locked = true

      right = new Door(log, 'right')
      right.trapped = true

      return log.run =>
        context = {
            left: left
            right: right
        }      
        _challenge context

- type: text
  text: >
    By now, you have understood the importance of order. Order is what rules
    everything. Do not get cocky: you are far from done with this evaluation.

- type: text
  text: >
    For your information, you have so far been classified as slower, dumber,
    and even more clueless than the other applicants.

- type: text
  text: >
    However, according to the regulation code, we are required to make you go
    through the whole test before removing you from active life and sending
    you to a silicon mine.

- type: text
  text: >
    That said, it is in your interest to take the following assignments very
    seriously.

- type: clear

- type: save
  code: redbull

- type: text
  text: >
    The next assignment will require a new construct: conditionals.

- type: text
  text: >
    You will find below an example of conditional.
  sample: |
    if human
        worthless
    else
        worthy

- type: text
  text: >
    Your code must now be satisfying in every possible case.

- type: text
  text: >
    The stage for this assignment contains two doors as well. However,
    each possible combination will be tested against your code.

- type: text
  text: >
    For your code to work no matter which door is trapped, @left
    or @right, you may ask questions to the guard, @xzoor.

- type: text
  text: >
    To ask the guard if a door is trapped, simply do:
    @xzoor.isTrapped(door).

- type: code 
  text: >
    Write code that always enters the correct door, no matter which one
    is trapped.
  code: |
    class Guard
      constructor: (@log, @name) ->

      isTrapped: (door) ->
        @log.append "You asked #{@name} if door #{door.name} was trapped."
        if door.trapped
          @log.append "He said yes."
        else
          @log.append "He said no."
        door.trapped

    class Door
      constructor: (@log, @name) ->
        @locked = false
        @entered = false
        @trapped = false

      unlock: ->
        @log.append "You unlocked door #{@name}."
        @locked = false

      enter: ->
        if @locked
          @log.append "You tried to enter door #{@name}, but it was locked."
        else if @trapped
          @log.append "Door #{@name} was trapped, and you died horribly."
          @log.fail()
        else
          @log.append "You entered door #{@name}."
          @log.succeed()
          @entered = true

    enter = (door) ->
      door.enter()

    unlock = (door) ->
      door.unlock()

    _condition = ->
      for i in [0, 1]
        log = new Log()

        left = new Door(log, 'left')
        right = new Door(log, 'right')
        xzoor = new Guard(log, 'xzoor')

        if i == 0
          left.locked = true
          right.trapped = true
        else
          right.locked = true
          left.trapped = true

        response = log.run =>
          context = {
              left: left
              right: right
              xzoor: xzoor
          }      
          _challenge context

        unless log.successful()
          return response

      { message: "Your code is correct.", advance: true }

- type: text
  text: >
    Now for the first real challenge.

- type: clear

- type: save
  code: pueblo

- type: text
  text: >
    Two doors: '@left', and '@right'. One of them leads to redemption.
    One to eternal damnation. Two guards, '@xzoor' and '@xena'.
    One of them always lies, the other always tells the truth.
    You can ask the guards two questions: 'isTrapped' and 'isTrue'.

- type: text
  text: >
    Of course, since you don't know who is lying, it is not as simple
    as it looks.

- type: code
  text: >
    Write a program that enters the correct door every time.
  code: |
    class Guard
      constructor: (@log, @name, @lying) ->

      isTrapped: (door) ->
        @log.append "You asked #{@name} if door #{door.name} was trapped."
        result = door.trapped
        if @lying
          result = !result

        if result
          @log.append "#{@name} said yes."
        else
          @log.append "#{@name} said no."
        result

      isTrue: (truth) ->
        @log.append "You asked #{@name} if something was true."

        result = truth
        if @lying
          result = !result

        if result
          @log.append "#{@name} said yes."
        else
          @log.append "#{@name} said no."
        result

    class Door
      constructor: (@log, @name, @trapped) ->
        @entered = false
        @locked = !@trapped

      unlock: ->
        @log.append "You unlocked door #{@name}."
        @locked = false

      enter: ->
        if @locked
          @log.append "You tried to enter door #{@name}, but it was locked."
        else if @trapped
          @log.append "Door #{@name} was trapped, and you died horribly."
          @log.fail()
        else
          @entered = true
          @log.append "You entered door #{@name}."
          @log.succeed()

    enter = (door) ->
      door.enter()

    unlock = (door) ->
      door.unlock()

    _condition = ->
      for i in [0, 1]
        for j in [0, 1]
          log = new Log()
          context = {
            left:  new Door(log, "left",  i == 0)
            right: new Door(log, "right", i == 1)
            xzoor: new Guard(log, "xzoor", j == 0)
            xena:  new Guard(log, "xena",  j == 1)
          }

          response = log.run =>
            _challenge context

          unless log.successful()
            return response

      { message: "You pass. For now.", advance: true }

- type: end
  text: >

- type: stopper

