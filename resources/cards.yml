- type: text
  text: >
    Welcome, subject #2304.
  
- type: text
  text: >
    You have been selected for a routine aptitude test.

- type: text
  text: >
    As you surely know, the recent regulation code dictates that all human
    specimens be regularly checked for basic survival abilities.
    
- type: text
  text: >
    Your ability to perform logic will be evaluated. You will be given a fair
    shot at remaining an active member of society.

- type: text
  text: >
    This test is not a test.
    
- type: text
  text: >
    Do not disappoint.

- type: code
  text: >
    If you have understood the instructions, type: answer 'yes'
  code: |
    _question = new SimpleQuestion {
      correct: [ 'yes' ]
      smartass: [ 'no' ]
    }

    answer = (x) -> _question.answer(x)

    _condition = ->
      _challenge {}
      _question.react()

- type: text
  text: Good.

- type: text
  text: >
    From now on, any answer you give us will be given in this form.

- type: clear

- type: text
  text: >
    Here is your first assignment.

- type: code
  text: >
    It is more useless than you. What is it?
  code: |
    _question = new SimpleQuestion {
      correct: [ 'nothing' ]
      smartass: [ 'me' ]
    }

    answer = (x) -> _question.answer(x)

    _condition = ->
      _challenge {}
      _question.react()

- type: text
  text: >
    That's right! Nothing is more useless than you. It is good to hear
    that you know your place.

- type: clear

- type: text
  text: >
    Now for something harder.

- type: code
  text: >
    There is a certain crime, that if it is attempted, is punishable,
    but if it is committed, is not punishable. What is the crime?
  code: |
    _question = new SimpleQuestion {
      correct: [ 'suicide' ]
      smartass: []
    }

    answer = (x) -> _question.answer(x)

    _condition = ->
      _challenge {}
      _question.react()

- type: clear

- type: text
  text: >
    I see you are in the right mindset.

- type: text
  text: >
    However, do not delude yourself into thinking that this could be
    an escape to your evaluation.

- type: text
  text: >
    In other words: resistance is futile.

- type: code
  text: >
    Answer 'yes' if you understand.
  code: |
    _question = new SimpleQuestion {
      correct: [ 'yes' ]
      smartass: [ 'no' ]
    }

    answer = (x) -> _question.answer(x)

    _condition = ->
      _challenge {}
      _question.react()

- type: text
  text: >
    Good.

- type: clear

- type: text
  text: >
    We shall begin testing your programming abilities soon.

- type: text
  text: >
    In the meantime, you are required to answer the following question.

- type: code
  text: >
    The more you have it, the less you see. What is it?
  code: |
    _question = new SimpleQuestion {
      correct: [ 'darkness', 'the dark', 'dark' ]
      smartass: [ 'blindness' ]
    }

    answer = (x) -> _question.answer(x)

    _condition = ->
      _challenge {}
      _question.react()

- type: text
  text: >
    That is correct.

- type: text
  text: >
    Which, after all, is expected of you. Darkness is a familiar concept
    to you humans, with your puny sensorial devices.

- type: save
  code: bombardier

- type: clear

- type: text
  text: >
    You have now entered the programming part of your evaluation.

- type: text
  text: >
    Follow instructions very carefully, as any discrepancies could 
    result in intergalactic instability.

- type: text
  text: >
    For the purpose of this exercise, we have summoned an
    interdimensional door. Its name is '@door'.

- type: text
  text: >
    To pass to the next level, enter the door. You can enter
    doors by doing: 'enter @door'

- type: code
  text: Enter the door.
  code: |
    class Door
      constructor: ->
        @entered = false

      enter: ->
        @entered = true

    enter = (door) ->
      door.enter()

    _condition = ->
      context = {
          door: new Door()
      }      
      response = _challenge context

      unless context.door.entered
        return _retort 'You did not enter the door.'

      _respond(1, 1)

- type: text
  text: >
    Good.
 
- type: text
  text: >
    That's it for now. Tell me what you think about it
    by <a href="https://twitter.com/intent/tweet?text=@nddrylliog I just played The Choice and here's what I think: " target="_blank">sending me a tweet.</a>
    Thanks for playing!

- type: stopper

- type: text
  text: >

- type: text
  text: >
    Two doors: '@left', and '@right'. One of them leads to redemption.
    One to eternal damnation. Two guards, '@ted' and '@larry'.
    One of them always lies, the other always tells the truth.
    You can ask the guards two questions: 'isDoor' and 'isTrue'.

- type: text
  text: >
    For example, if you wanted to ask @ted if he thinks the door to
    the left leads to redemption, you could type '@ted.isDoor(@left)'.

- type: text
  text: >
    Of course, since you don't know who is lying, that would be futile.

- type: code
  text: >
    Now listen closely: I want you to write a program that evaluates
    to true if the right door is.. the right one, and false if the right
    door leads to damnation. Go on, try it!
  code: |
    class Guard
      constructor: (@lying) ->
      
      isDoor: (door) ->
        @isTrue door.life

      isTrue: (truth) ->
        if @lying
          !truth
        else
          truth

    class Door
      constructor: (@life) ->

    _condition = ->
      successes = 0

      for i in [0, 1]
        for j in [0, 1]
          context = {
            left:  new Door(i == 0)
            right: new Door(i == 1)
            ted:   new Guard(j == 0)
            larry: new Guard(j == 1)
          }
          response = _challenge context

          if context.right.life == response
            successes += 1

      _respond(successes, 4)

